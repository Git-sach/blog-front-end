import { AsyncPipe } from '@angular/common';
import { Component, Input, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { BehaviorSubject } from 'rxjs';
import { ContentInput, ContentInputCollection } from '../../../shared/models/contentInputCollection.model';
import { PostContentFormComponent } from '../../../shared/ui/post-content-form.component';

@Component({
  selector: 'app-edit-post-content',
  standalone: true,
  imports: [FormsModule, PostContentFormComponent, AsyncPipe],
  template: `
    <app-post-content-form
      (enterInputEmitter)="splitInputOnEnter($event)"
      (emptyInputEmmiter)="mergeInputOnBackspace($event)"
      [placeCursor]="placeCursor$ | async"
      [inputsFormContent]="inputsFormContent$ | async"
      [autofocusIndex]="autofocusIndex$ | async"></app-post-content-form>
  `,
  styles: ``,
})
export class EditPostContentComponent implements OnInit {
  @Input() set id(id: number) {}

  // local stats
  inputsFormContent$ = new BehaviorSubject<ContentInputCollection>(new ContentInputCollection());
  autofocusIndex$ = new BehaviorSubject<number>(0);
  placeCursor$ = new BehaviorSubject<number>(0);

  html =
    "<p>--TOC--</p><h1>Pourquoi un Framework ?</h1><p>L'utilisation d'un framework pour simplifier le d√©veloppement d'une application suscite un grand int√©r√™t. Un des points forts majeurs est sa capacit√© √† g√©rer efficacement les mises √† jour d'interfaces lorsque les donn√©es √©voluent. Les frameworks sont con√ßus pour d√©tecter automatiquement les modifications n√©cessitant une mise √† jour dans le DOM, ce qui est souvent d√©sign√© comme la d√©tection de changement.</p><p>Voici √† quoi peut ressembler la simple mise √† jour d'une interface suite au changement d'une valeur, sans l'utilisation d'un framwork tel que Angular üò©</p><pre><code>&lt;html&gt;  &lt;!-- Affichage de la valeur et du bouton --&gt;  &lt;div id=&quot;data&quot;&gt;&lt;/div&gt;  &lt;button id=&quot;btn&quot;&gt;Changer la valeur&lt;/button&gt;  &lt;script&gt;      let value = &quot;valeur initiale&quot;;      // Appelle √† la fonction de mise √† jour du template       detectChange();      // Fonction de mise √† jour de la div #data       function detectChange() {        const currentValue = document.getElementById(&quot;data&quot;).innerText;        if (currentValue === value) {            document.getElementById(&quot;data&quot;).innerText = value;          }      }  // √âv√©nement au clic sur le bouton   document.getElementById(&quot;btn&quot;).addEventListener(&quot;click&quot;, () =&gt; {    value = &quot;valeur mise &agrave; jour&quot;;    // Appelle √† la fonction de mise √† jour du template     detectChange();     });  &lt;/script&gt;&lt;/html&gt;</code></pre><h1>Zone.js</h1><p>La d√©tection de changements dans Angular repose sur l'utilisation d'une biblioth√®que appel√©e <strong>Zone.js</strong>. Cette biblioth√®que offre l'avantage de surveiller les op√©rations qui se produisent dans l'application.</p><p>Zone.js est une biblioth√®que d√©velopp√©e par l'√©quipe Angular, qui permet d'intercepter les op√©rations <strong>synchrones</strong> et <strong>asynchrones</strong>, offrant ainsi la possibilit√© d'ex√©cuter du code avant et apr√®s l'√©v√©nement. On parle de 'monkey patching' (retenez ce terme).</p><p>Voici une version <strong>tr√®s simplifi√©e</strong> de ce que permet de r√©aliser une zone.</p><pre><code>const oldSetTimeout = setTimeout;setTimeout = (callback, timer) => {  console.log('Avant √©v√©nement');  oldSetTimeout((_) => {    callback();    console.log('Adp√®s √©v√©nement');  }, timer);};</code></pre><p>Nous √©crasons ici le comportement natif de la fonction <u>setTimeout()</u> dans le but d'ajouter des logs avant et apr√®s l'ex√©cution du <u>setTimeout()</u>.</p><pre><code>setTimeout(() => {  console.log('Hello world');}, 1000);</code></pre><p>Lorsque nous faisons appel √† notre fonction <u>setTimeout()</u> revisit√©e, nous obtenons en sortie notre log d√©fini dans le <u>setTimeout()</u>, encadr√© par les logs ajout√©s au comportement de la fonction native.</p><pre><code>Avant √©v√©nementHellow worldApr√®s √©v√©nement</code></pre><p>Avec l‚Äôutilisation de Zone.js, cela se traduit de la fa√ßon suivante :</p><pre><code>const zone = Zone.current.fork({  onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {    console.log('Avant l'√©v√©nement');    delegate.onInvokeTask(target, task, applyThis, applyArgs);    console.log('Apres l'√©v√©nement')  }});</code></pre><p>Nous √©tablissons une <strong>'zone'</strong> qui offre un contexte d'ex√©cution <strong>persistant</strong> √† travers les op√©rations asynchrones, r√©solvant ainsi une ‚Äòfaiblesse‚Äô de JavaScript, o√π le contexte d'ex√©cution d'une fonction varie en fonction de l'endroit o√π cette fonction est invoqu√©e.</p><p>Pour ex√©cuter notre <u>setTimout</u> √† l‚Äôint√©rieur de cette zone, nous utilisons la m√©thode <u>zone.run()</u>.</p><pre><code>zone.run(() => {  setTimeout(() => {    console.log('Hello world');  }, 1000);})</code></pre><h1>NgZone</h1><p>√âtant donn√© que Zone.js permet de suivre l'√©tat des op√©rations synchrones et asynchrones, Angular propose un service additionnel appel√© <strong>NgZone</strong>. Ce service √©tablit une zone, exploitant ainsi les fonctionnalit√©s de Zone.js, pour automatiser la d√©tection des changements au sein des applications Angular.</p><img src='https://blogapi.adriencheynet.fr/image/5/graphique1.png'/><p>Mais alors, √† quel moment la d√©tection de changement est-elle d√©clench√©e ?</p><h1>D√©clenchement de la d√©tection de changement</h1><p>En JavaSript, les op√©rations asynchrones peuvent √™tre divis√©es en deux cat√©gories&nbsp;: Les <strong>Micro-tasks</strong> et les <strong>Macro-tasks</strong></p><p>Les <strong>Micro-tasks</strong> : ce sont les t√¢ches de haute priorit√© qui sont ex√©cut√©es en premier.</p><p>Les <strong>Macro-tasks</strong> : ce sont les t√¢ches de basse priorit√© qui sont ex√©cut√©es apr√®s les micro-tasks.</p><img src='https://blogapi.adriencheynet.fr/image/5/tableauxMicroMacroTasck.png'/><p>Pour garantir une exp√©rience utilisateur fluide, la d√©tection de changement d'Angular est d√©clench√©e une fois que la pile des Micro-tasks est vide.</p><p>NgZone met en place un <strong>Observable</strong> nomm√© <u>onMicrotaskEmpty</u> qui √©met une valeur lorsqu‚Äôil n‚Äôy a plus de Micro-task dans la pile. Angular utilise cet Observable pour d√©terminer le moment propice au d√©clenchement de la d√©tection de changement.</p><p>Voici une version <strong>tr√®s simplifi√©e</strong> du comportement de NgZone.</p><pre><code>function onEnter() {  _stack++;}function onLeave() {  _stack--;  checkStable();}function checkStable() {  if (_stack == 0) {    onMicrotaskEmpty.next(null);  }}</code></pre><p>Lorsqu'une nouvelle micro-task entre dans la pile, on incr√©mente. Lorsqu'une micro-task sort de la pile, on d√©cr√©mente en v√©rifiant si la pile est vide. Si c'est le cas, on √©met sur l'Observable <u>onMicrotaskEmpty</u>.</p><p>Angular souscrit √† cet Observable afin d'initier la d√©tection de changement au bon moment en utilisant la m√©thode <u>applicationRef.tick()</u></p><pre><code>this.zone.onMicrotaskEmpty.subscribe({  next: () => this.zone.run(() => this.applicationRef.tick())})</code></pre><h1>Propagation de la d√©tection de changement</h1><p>Maintenant que l‚Äôon a une id√©e de quand et comment la d√©tection de changement est d√©clench√©e, explorons comment celle-ci se <strong>propage</strong> au sein de l'application.</p><p>Voici un sch√©ma illustrant l'arborescence de notre application. Nous d√©clenchons un √©v√©nement, tel qu'un clic sur l'un des composants.</p><img src='https://blogapi.adriencheynet.fr/image/5/graphique2.png'/><p>Une fois que l'action asynchrone est termin√©e, Zone.js va donc √©mettre une valeur sur l'Observable onMicrotaskEmpty, signalant √† Angular que la d√©tection de changement doit √™tre ex√©cut√©e.</p><p>Par d√©faut, lors de l'ex√©cution de la d√©tection de changement, Angular v√©rifie <strong>tous</strong> les composants de l'arbre pour d√©terminer si les templates doivent √™tre mis √† jour. üò≤</p><img src='https://blogapi.adriencheynet.fr/image/5/graphique3.png'/><p>Ce comportement n'est pas optimis√© et peut engendrer des pertes de performance si notre application comporte de nombreux composants.</p><p>Bien √©videmment, Angular nous laisse la possibilit√© d‚Äôaffiner la strat√©gie de d√©tection de changement üòç</p><p>Il existe un comportement qui fait en sorte que lorsqu'un changement survient dans un composant, Angular le marque comme <strong>Dirty</strong> </p><p>Cela intervient pour deux raisons :</p><ul><li><p>La valeur de l‚Äô<u>@Input()</u> du Composant change</p></li><li><p>Un <strong>Event</strong> est g√©n√©r√© dans le Composant (click, keydown...)</p><p>(Les Events sont aussi g√©r√©s avec du monkey patching pour rendre dirty les composants)</p></li></ul><p>Lorsqu‚Äôun composant est marqu√© Dirty , tous les Composants parents dans l‚Äôarborescence le sont √©galement.</p><img src='https://blogapi.adriencheynet.fr/image/5/graphique4.png'/><p>La strat√©gie de d√©tection de changement par d√©faut ne tire pas parti des composants marqu√©s comme Dirty.</p><p>Pour en tirer parti, nous avons la possibilit√© d'indiquer √† nos composants d'utiliser la strat√©gie <strong>OnPush</strong> dans leurs d√©corateurs <u>@Component()</u>.</p><pre><code>@Component({  ...  changeDetection: ChangeDetectionStrategy.OnPush,})export class MyComponent {  ...}</code></pre><p>Lorsque nous faisons cela, nous indiquons √† Angular que, pour le sous-arbre de composants concern√©s, nous voulons ex√©cuter la d√©tection de changement uniquement si le composant racine du sous-arbre est marqu√© comme Dirty.</p><img src='https://blogapi.adriencheynet.fr/image/5/graphique5.png'/><p>En d'autres termes, les composants configur√©s avec la strat√©gie OnPush b√©n√©ficient de la d√©tection de changement uniquement dans les cas suivants :</p><ul><li><p>Si un changement a eu lieu sur un <u>@Input()</u> du composant</p></li><li><p>Si un Event a √©t√© g√©n√©r√© dans le composant</p></li></ul><img src='https://blogapi.adriencheynet.fr/image/5/graphique6.png'/><h1>Exemples</h1><h2>Exemple 1</h2><p>Ici, nous d√©finissons un √©v√©nement au clique sur le bouton, qui vient incr√©menter un nombre.</p><pre><code>@Component({  template: `    &lt;p&gt;{{number}}&lt;/p&gt;    &lt;button (click)=&quot;onClick()&quot; &gt;&lt;/button&gt;  `,  changeDetection: ChangeDetectionStrategy.OnPush,})export class MyComponent {  number: number = 0;  onClick() {    this.number++;  }}</code></pre><p>Notre composant a pour strat√©gie de d√©tection de changement OnPush.</p><p>√âtant donn√© que nous utilisons un √©v√©nement pour incr√©menter notre valeur, le composant sera marqu√© comme Dirty, et la vue sera donc mise √† jour correctement lors de l'activation de la d√©tection de changement. üôÇ</p><p></p><h2>Exemple 2</h2><p>Nous d√©finissons ici un Observable qui √©mettra des valeurs de 0 jusqu‚Äô√† 99 dans un composant configur√© avec la strat√©gie de d√©tection de changement <u>OnPush</u>.</p><p>√âtant donn√© qu'un observable ne marque pas un composant comme Dirty lorsqu'il √©met, notre vue ne sera jamais actualis√©e, et le compteur restera √† 0. üôÅ</p><pre><code>@Component({  template: `&lt;p&gt;compteur: {{number}}&lt;/p&gt;`,  changeDetection: ChangeDetectionStrategy.OnPush,})export class MyComponent {  observable = interval(1000).pipe(task(100));  number: number = 0;  this.observable.subscribe(() =&gt; {    this.number = x;  })}</code></pre><p>Nous avons plusieurs solutions pour r√©parer notre logique.</p><p>Nous pouvons simplement utiliser la strat√©gie de d√©tection de changement par d√©faut qui ne se pr√©occupe pas de savoir si un composant est Dirty ou non.</p><p></p><h2>Exemple 3</h2><p>Nous pouvons √©galement maintenir notre composant en mode OnPush, mais indiquer √† Angular que nous voulons que, lors du prochain cycle de d√©tection de changement, notre composant soit mis √† jour.</p><p>Pour ce faire, nous utilisons la m√©thode <u>markForCheck()</u> de <u>ChangeDetectorRef</u>, que nous pouvons r√©cup√©rer par injection de d√©pendance. üôÇ</p><pre><code>@Component({  template: `    &lt;p&gt;{{number}}&lt;/p&gt;    &lt;button (click)=&quot;onClick()&quot; &gt;&lt;/button&gt;  `,  changeDetection: ChangeDetectionStrategy.OnPush,})export class MyComponent {  observable = interval(1000).pipe(task(100));  number: number = 0;  this.observable.subscribe(() =&gt; {    this.changeDetectorRef.markForCheck();    this.number = x;  })}</code></pre><p>Il faut cependant rester vigilant avec ce type de manipulation, car cela peut rapidement devenir tr√®s co√ªteux en termes de ressources.</p><p></p><h2>Exemple 4</h2><p>La troisi√®me solution consiste √† maintenir notre composant en mode <u>OnPush</u> et √† utiliser dans notre vue le pipe <u>async</u> mis √† disposition par Angular. üòÄ</p><pre><code>@Component({  template: `    &lt;p&gt;{{observable | async}}&lt;/p&gt;    &lt;button (click)=&quot;onClick()&quot;&gt;&lt;/button&gt;  `,  changeDetection: ChangeDetectionStrategy.OnPush,})export class MyComponent {  observable = interval(1000).pipe(task(100));}</code></pre><p>En r√©alit√©, le pipe <u>async</u> utilise exactement la m√™me m√©thode que nous venons de voir pr√©c√©demment, en appelant la m√©thode <u>markForCheck()</u> de <u>ChangeDetectorRef</u> lorsque l'observable √©met une valeur. Ici encore, le principe de monkey patching est utilis√©.</p><h1>D√©sactiver Zone.js</h1><p>Il est possible de d√©sactiver NgZone de Angular.</p><p>Dans ce cas, notre application ne sera pas encapsul√©e dans une zone et la d√©tection de changement devra enti√®rement √™tre r√©alis√©e de fa√ßon manuelle en manipulant <u>ChangeDetectorRef()</u> et <u>ApplicationRef()</u>.</p><p>Pour d√©sactiver NgZone, il faut indiquer dans l‚Äôobjet de param√©trage fourni √† bootstrapModule que nous n‚Äôutilisons pas NgZone.</p><pre><code>platformBrowserDynamic().bootstrapModule(AppModule, { ngZone: 'noop' }).catch(err => console.error(err));</code></pre><h1>En dehors de NgZone</h1><p>Sans d√©sactiver totalement NgZone de notre application, il est possible d‚Äôex√©cuter du code en dehors de la zone Angular NgZone.</p><p>Cela peut √™tre particuli√®rement b√©n√©fique lorsque nous avons une logique qui s'ex√©cute sans n√©cessiter de mises √† jour de la vue, tel qu'un timer qui n'est pas destin√© √† √™tre affich√© par exemple.</p><pre><code>@Component({  template: `    &lt;p (click)=&quot;refraichView()&quot; &gt;compteur : {{number}}&lt;/p&gt;  `})export class MyComponent {  private ngZone = Injectable(NgZone);  number: number = 0;  ngOnInit() {    this.ngZone.runOutsideAngular(() => {      setInterval(() => this.number++, 100)    })  }  refraichView() {};}</code></pre><p>Dans cet exemple, nous utilisons la strat√©gie de d√©tection par d√©faut, donc setInterval devrait normalement mettre √† jour la vue. Cependant, √©tant donn√© que nous ex√©cutons ce code en dehors de la Zone Angular, la d√©tection des changements n'est pas d√©clench√©e. M√™me si le compteur est effectivement incr√©ment√©. üò¶</p><h1>Conclusion</h1><p>La d√©tection de changements est l'une des fonctionnalit√©s centrales d'un framework tel qu'Angular. Elle permet de maintenir une synchronisation entre le mod√®le de donn√©es et l'interface utilisateur.</p><p>Pour surveiller les changements de donn√©es dans les diff√©rents composants, Angular utilise la biblioth√®que Zone.js qui intercepte les op√©rations synchrones et asynchrones effectu√©es dans l'application, d√©clenchant ainsi la d√©tection de changements.</p><p>En comprenant comment la d√©tection de changements est r√©alis√©e et en utilisant des strat√©gies de d√©tection de changements adapt√©es, nous pouvons optimiser les performances de nos applications en limitant les v√©rifications de changements uniquement aux cas pertinents.</p><p>L'impl√©mentation des Signaux dans la version 17 d'Angular permet d'aller encore plus loin dans l'optimisation de la d√©tection de changements en ciblant plus pr√©cis√©ment les composants qui doivent √™tre rafra√Æchis, et ce, en se passant de Zone.js</p><p>Mais nous parlerons plus en d√©tail des signaux et de leurs effets sur la d√©tection de changements dans un prochain post üòã</p>";

  ngOnInit(): void {
    // provisoire, passer par le input set id
    //TODO: Faire une methode pour passer du stringHTML au tableaux et faire la m√©thode inverse

    let match;
    const h1Regex = /<h1[^>]*>[\s\S]*?<\/h1>/gi;
    const pRegex = /<p[^>]*>[\s\S]*?<\/p>/gi;
    const baliseRegex = /<\/?[^>]+(>|$)/g;

    while ((match = h1Regex.exec(this.html)) !== null) {
      const currentInputs = this.inputsFormContent$.value;
      const newContentInput = new ContentInput('h1', match[0].replace(baliseRegex, ''), match.index);
      const updatedInputs = currentInputs.addContentInput(newContentInput);

      this.inputsFormContent$.next(updatedInputs);
    }

    while ((match = pRegex.exec(this.html)) !== null) {
      const currentInputs = this.inputsFormContent$.value;
      const newContentInput = new ContentInput('p', match[0].replace(baliseRegex, ''), match.index);
      const updatedInputs = currentInputs.addContentInput(newContentInput);
      this.inputsFormContent$.next(updatedInputs);
    }

    const sortedInputs = this.inputsFormContent$.value.sort();
    this.inputsFormContent$.next(sortedInputs);
  }

  /**
   * Method to split input content and create a new input after the current input with the content after the cursor.
   * and set the autofocus index to the new input
   * @param event Object containing information about the input event: indexInput, indexSelection, and inputContent.
   */
  splitInputOnEnter(event: { indexInput: number; indexSelection: number; inputContent: string }) {
    const textBeforeCursor: string = event.inputContent.substring(0, event.indexSelection);
    const textAfterCursor: string = event.inputContent.substring(event.indexSelection);

    const updatInput = new ContentInput('p', textBeforeCursor, 0);
    let updatedInputs = this.inputsFormContent$.value.updateAContentInput(event.indexInput, updatInput);

    const newInput = new ContentInput('p', textAfterCursor, 0);
    updatedInputs = updatedInputs.addContentInput(newInput, event.indexInput + 1);

    this.inputsFormContent$.next(updatedInputs);
    this.placeCursor$.next(0);
    this.autofocusIndex$.next(event.indexInput + 1);

    // TODO: G√©rer la sauvegarde dans le backend
  }

  /**
   * Method that deletes an input when the cursor is at the beginning of the input on backspace action
   * Text is merged into the previous input. It then sets the autofocus index to the new input.
   * @param event Object containing information about the input event: indexInput, indexSelection, and inputContent.
   */
  mergeInputOnBackspace(event: { indexInput: number; indexSelection: number; inputContent: string }) {
    const curentInputs = this.inputsFormContent$.value;
    const cursorPosition = curentInputs.contentInputCollection[event.indexInput - 1].content.length;

    const curentContent = curentInputs.contentInputCollection[event.indexInput - 1].content;
    const updatInput = new ContentInput('p', curentContent + event.inputContent, 0);

    const updatedInputs = curentInputs
      .updateAContentInput(event.indexInput - 1, updatInput)
      .deleteContentInput(event.indexInput);

    this.inputsFormContent$.next(updatedInputs);
    this.autofocusIndex$.next(event.indexInput - 1);
    this.placeCursor$.next(cursorPosition);
  }
}
